Function Explanation for CLAHE.cpp and CLAHE.h:

1.	Constructor (CLAHEProcessor):
•	Initializes CLAHE processor with hardware threading capabilities
•	Sets up OpenCV CLAHE object and resets performance metrics

2.	Memory Management Functions:

•	allocateImageBuffer: 
	Allocates 2D double array for image processing
	Returns dynamically allocated memory for image data

•	deallocateImageBuffer: 
	Safely frees memory allocated for image buffers
	Prevents memory leaks by properly cleaning up 2D arrays

3.	Format Conversion Functions:

•	doubleToMat: 
	Converts double array image data to OpenCV Mat format
	Enables processing with OpenCV functions

•	matToDouble: 
	Converts OpenCV Mat back to double array format
	Preserves processed data in original format

4.	Standard CLAHE Functions:

•	applyCLAHE: 
	GPU-accelerated implementation
	Enhances local contrast using histogram equalization
	Applies clip limit to prevent noise amplification

•	applyCLAHE_CPU: 
	Multi-threaded CPU implementation
	Processes image in parallel strips for better performance
	Uses multiple CLAHE instances across threads

5.	Combined CLAHE Functions:

•	applyCombinedCLAHE: 
	GPU version preserving bright details
	Takes maximum value between original and CLAHE-processed pixels
	Maintains 16-bit precision

•	applyCombinedCLAHE_CPU: 
	CPU version with brightness preservation
	Multi-threaded implementation for performance
	Preserves original bright areas while enhancing dark regions

6.	Threshold CLAHE Functions:

•	applyThresholdCLAHE: 
	GPU-accelerated selective CLAHE
	Only processes regions below specified threshold
	Leaves bright areas untouched

•	applyThresholdCLAHE_CPU: 
	CPU implementation of threshold-based CLAHE
	Creates mask for dark regions
	Selectively applies enhancement

7.	Logging Functions:

•	logThreadStart: 
	Thread-safe logging of processing start
	Records row range information

•	logThreadComplete: 
	Logs thread completion status

•	logMessage: 
	General purpose thread-safe logging
	Includes thread identification

8.	Performance Monitoring:

•	PerformanceMetrics struct: 
	Tracks processing and total time
	Records number of threads used
	Monitors CLAHE operation status

9.	Thread Management:

•	ThreadConfig struct: 
	Manages thread parameters
	Configures number of threads and chunk sizes

•	ThreadProgress struct: 
	Tracks multi-threaded operation progress
	Uses atomic counters for thread safety

10.	Utility Classes:

•	ScopedTimer: 
	RAII-style timing mechanism
	Automatically measures operation duration
	Provides performance logging

